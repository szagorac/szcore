<? javascript



var SERVER_ADDRESS = "192.168.0.1";
var SERVER_PORT = "7777";

var LOCAL_PORT = "7000";
var LOCAL_OUT_PORT = "7001";

var SPACE = " ";
var NL = "\n";
var SEMICOLON = ";";
var UNDERSCORE = "_";
var PLUS = "+";
var COMMA = ",";
var SINGLE_QUOTE = "'";
var DOT = ".";
var SLASH = "/";
var BASE_BEAT_FRACTION = "/8";

var ALPHA = "alpha";
var PEN_COLOR = "penColor";
var PEN_WIDTH = "penWidth";
var SHOW = "show";
var COLOR = "color";
var SET = "set";
var FILE = "file";
var TXT = "txt";
var DATE = "date";
var TEMPO = "tempo";
var FRAMELESS = "frameless";
var FULLSCREEN = "fullscreen";

var SZCORE = "SZCORE";
var HELLO = "HELLO";
var PING = "PING";
var SET_INSTRUMENT = "SET_INSTRUMENT";

var CONTENT_ALL = "/ITL/scene/contentPaneFull";
var CONTENT_TOP = "/ITL/scene/contentPaneTop";
var CONTENT_MIDDLE = "/ITL/scene/contentPaneMiddle";
var CONTENT_BOTTOM = "/ITL/scene/contentPaneBottom";
var CONTENT_YU_STAR = "/ITL/scene/yuStar";
var CONTENT_MACED_STAR = "/ITL/scene/macedoniaStar";
var CONTENT_BIH_STAR = "/ITL/scene/bihYuCorner";
var CONTENT_FLAG_DECORATOR = "/ITL/scene/flagDecorator";
var CONTENT_UK_FLAG = "/ITL/scene/ukFlag";

var SCENE = "/ITL/scene";
var STAVE1 = "/ITL/scene/stave";
var STAVE2 = "/ITL/scene/stave2";
var BEATER = "/ITL/scene/beater";
var SCORE_FOLLOW_BEATER = "/ITL/scene/slaveBeat";
var SCORE_FOLLOW_BEATER2 = "/ITL/scene/slaveBeat2";
var SCORE_FOLLOW_LINE = "/ITL/scene/slaveFollow";
var SCORE_FOLLOW_LINE2 = "/ITL/scene/slaveFollow2";
var SCORE_START_MARK = "/ITL/scene/slaveStartMark";
var SCORE_START_MARK2 = "/ITL/scene/slaveStartMark2";
var STAVE_MASK = "/ITL/scene/staveMask";
var STAVE2_MASK = "/ITL/scene/stave2Mask";
var LOGGER = "/ITL/scene/logger";
var CONNECT = "/ITL/scene/connect";
var CONNECT_BOX = "/ITL/scene/connectBox";
var SERVER = "/ITL/scene/server";
var TITLE = "/ITL/scene/title";
var PART = "/ITL/scene/part";
var SELECT_PART_LAYER = "/ITL/scene/selectPartLayer";
var SCORE_SERVER_ADDR = "/ITL/scene/serverAddr";
var SCORE_SERVER_ADDR_BOX = "/ITL/scene/serverAddrBox";

var RSRC_DIR = "rsrc/";

var ACTIVE_PEN_COLOR = SPACE + PEN_COLOR + " 250 150 150;";
var INACTIVE_PEN_COLOR = SPACE + PEN_COLOR + " 200 200 200;";
var ACTIVE_PEN_WIDTH = SPACE + PEN_WIDTH + " 2.;";
var INACTIVE_PEN_WIDTH = SPACE + PEN_WIDTH + " 1.;";

var ACTIVE_ALPHA = SPACE + ALPHA + " 155;";
var INACTIVE_ALPHA = SPACE + ALPHA + " 0;";
var BEATER_ON = SHOW + " 1;";
var BEATER_OFF = SHOW + " 0;";
var RGB_0 = 0;
var RGB_255 = 255;
var RGB_222 = 222;
var RGB_56 = 56;
var RGB_51 = 51;
var RGB_147 = 147;
var RGB_153 = 153;
var GREEN = "0 255 0";
var RED = "222 0 0";
var BLUE = "0 56 147";
var EU_BLUE = "0 51 153";
var WHITE = "255 255 255";
var YELLOW = "255 255 0";
var ORANGE = "255 153 0";
var COLOR_GREEN = COLOR + SPACE + GREEN + " 255;";
var COLOR_RED = COLOR + SPACE + RED + " 255;";
var COLOR_BLUE = COLOR + SPACE + BLUE + " 255;";
var COLOR_BLUE = COLOR + SPACE + EU_BLUE + " 255;";
var COLOR_WHITE = COLOR + SPACE + WHITE + " 255;";
var COLOR_YELLOW = COLOR + SPACE + YELLOW + " 255;";
var COLOR_ORANGE = COLOR + SPACE + ORANGE + " 255;";
var DEFAULT_INST_Y = -0.6;
var SHOW_SELECT_PART_LAYER = SELECT_PART_LAYER +  " " + SHOW + " 1;";
var HIDE_SELECT_PART_LAYER = SELECT_PART_LAYER +  " " + SHOW + " 0;";

var JS_RUN = "/ITL/scene/javascript run ";
var DEFAULT_STAVE = "rsrc/blankStave.png";
var DEFAULT_TITLE = "Szcore";
var DEFAULT_PART = "Part";

var CONNECTED_PREFIX = "'Connected to: ";
var COMMAND_SUFFIX = "';";
var SET_TXT_COMMAND = " set txt ";
var CONNECT_SET_TXT = CONNECT + SET_TXT_COMMAND + CONNECTED_PREFIX;
var SERVER_TXT = "'Server: ";
var SERVER_SET_TXT = SERVER + SET_TXT_COMMAND + SERVER_TXT;
var SERVER_ADDR_SET_TXT = SCORE_SERVER_ADDR + SET_TXT_COMMAND;
var DATE_SET_TXT = SPACE + DATE + SPACE + SINGLE_QUOTE;
var BB_FRACTION_TXT = BASE_BEAT_FRACTION + SINGLE_QUOTE + SEMICOLON;
var TEMPO_SET_TXT = SPACE + TEMPO + SPACE;
var PING_TXT = SPACE + PING + SPACE + "'";

var instX = 0.0;
var instY = DEFAULT_INST_Y;
var instZ = 10.0;
var instTxtScale = 2.0;
var deltaInstY = 0.1;
var inactiveColor = "100 0 0";
var activeColor = "255 0 0";
var DEFAULT_INST_Y = -0.6;

var sceneComponents = [];
var controlComponents = [];
var instruments = [];
var instControls = [];
var instControlIdx = 0;
var connectAddr = SERVER_ADDRESS + ":" + SERVER_PORT + SLASH + SZCORE;
var serverAddress;

var activeStave = STAVE1;
var currentTempo = 0;

var maxBeaterNo = 4;
var controlsOn = true;

function init() {
    post(SCORE_SERVER_ADDR,"set","txt",SERVER_ADDRESS);
    
//    sceneComponents.push("/ITL/scene/contentPane");
    sceneComponents.push(CONTENT_ALL);
    sceneComponents.push(CONTENT_TOP);
    sceneComponents.push(CONTENT_MIDDLE);
    sceneComponents.push(CONTENT_BOTTOM);
    sceneComponents.push(CONTENT_YU_STAR);
    sceneComponents.push(CONTENT_MACED_STAR);
    sceneComponents.push(CONTENT_BIH_STAR);
    sceneComponents.push(CONTENT_FLAG_DECORATOR);
    sceneComponents.push(CONTENT_UK_FLAG);
    
    controlComponents.push(CONNECT);
    controlComponents.push(CONNECT_BOX);
    controlComponents.push(SERVER);
    controlComponents.push(SCORE_SERVER_ADDR);
    controlComponents.push(SCORE_SERVER_ADDR_BOX);
    controlComponents.push(PART);
    controlComponents.push(TITLE);
    controlComponents.push(LOGGER);
}
function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
};
function log(value){
    if(!value){
        return;
    }
    post(LOGGER, SET, TXT, value);
}
function logArray(arr){
    if(!arr || !isArray(arr)){
        return;
    }
    var out = "";
    for (var i = 0; i < arr.length; i++) {
        out += arr[i] + NL;
    }
    post(LOGGER, SET, TXT, out);
}
function activateStave1(){
    return activate(STAVE1);
}
function activateStave2(){
    return activate(STAVE2);
}
function deactivateStave1(){
    return deactivate(STAVE1);
}
function deactivateStave2(){
    return deactivate(STAVE2);
}
function allBeatersOff(){
    return beatersOff(this.maxBeaterNo);
}
function allBeatersOn(){
    return beatersOn(this.maxBeaterNo);
}
function beatersOn(beaterNo, colourId){
    var out = [];
    return out;
}
function beatersOff(beaterNo){
    var out = [];
    return out;
}
function postColourByName(component, colourName, alpha){
    if(!component) {
        return;
    }
    if(!colourName){
        colourName = "white";
    }
    var colour;
    switch (colourName.toLowerCase()){
        case "blue":
            post(component, COLOR, RGB_0, RGB_56, RGB_147, alpha);
            break;
        case "eublue":
            post(component, COLOR, RGB_0, RGB_51, RGB_153, alpha);
            break;            
        case "red":
            post(component, COLOR, RGB_222, RGB_0, RGB_0, alpha);
            break;
        case "white":
            post(component, COLOR, RGB_255, RGB_255, RGB_255, alpha);
            break;
        default :
            post(component, COLOR, RGB_255, RGB_255, RGB_255, alpha);
    }
    return colour;
}
function getColourByName(colourName){
    if(!colourName){
        colourId = "white";
    }

    var colour;
    switch (colourName.toLowerCase()){
        case "blue":
            colour = BLUE;
            break;
        case "eublue":
            colour = EU_BLUE;
            break;    
        case "red":
            colour = RED;
            break;
        case "white":
            colour = WHITE;
            break;
        default :
            colour = WHITE;
    }
    return colour;
}
function getColour(colourId){
    if(!colourId){
        colourId = 1;
    }

    var colour;
    switch (colourId){
        case 4:
            colour = COLOR_RED;
            break;
        case 3:
            colour = COLOR_ORANGE;
            break;
        case 2:
            colour = COLOR_YELLOW;
            break;
        case 1:
        default :
            colour = COLOR_GREEN;
    }
    return colour;
}
function activate (stave) {
    out = [];
    return out;
}
function resetStave (stave) {
    
}
function resetTitle () {
}
function resetPart () {
}
function showSelectPartLayer(){
    post(SELECT_PART_LAYER, SHOW, 1);
}
function hideSelectPartLayer(){
    post(SELECT_PART_LAYER, SHOW, 0);
}
function showComponent(component, show){
    if(!component) {
        return;
    }
    if(show < 0) {
        show = 0;
    }
    if(show > 1) {
        show = 1;
    }
    post(component, SHOW, show);
}
function setNoMask(){
}
function deactivate (stave) {
    out = [];
    return out;
}
function getMask(stave){
    var mask;
    switch (stave){
        case STAVE1:
            mask = STAVE_MASK;
            break;
        case STAVE2:
            mask = STAVE2_MASK;
            break;
    }
    return mask;
}
function getFollowBeater(staveId){
    var followBeater;
    switch (staveId){
        case 1:
            followBeater = SCORE_FOLLOW_BEATER;
            break;
        case 2:
            followBeater = SCORE_FOLLOW_BEATER2;
            break;
    }
    return followBeater;
}
function getFollowLine(staveId){
    var followLine;
    switch (staveId){
        case 1:
            followLine = SCORE_FOLLOW_LINE;
            break;
        case 2:
            followLine = SCORE_FOLLOW_LINE2;
            break;
    }
//    log("getFollowLine staveId: " + staveId + " followLine: " + followLine);
    return followLine;
}
function setDate (staveId, beatNo) {
    var out = [];
    return out;
}
function getStaveId(stave){
    var staveId = 1;
    if(stave === STAVE2){
        staveId = 2;
    }
    return staveId;
}
function setStaveTempo(stave, tempo) {
    var out = [];
    return out;
}
function endsWith(str, suffix) {
    if (!str || !suffix || suffix.length > str.length) {
        return false;
    }

    return str.slice(-1 * suffix.length) === suffix;
};
function removeLastChar(str){
    if(!str || str.length < 2){
        return str;
    }
    return str.substring(0, (str.length - 1));
}
function serverHello(addr) {
    serverAddress = addr;
    var out = [];
    //out.push(SERVER_ADDR_SET_TXT + addr + COMMAND_SUFFIX);
    out.push(SCORE_SERVER_ADDR_BOX + SPACE + COLOR_GREEN);
    return out;
}
function onServerAddrChange(addr) {
    if (!addr || addr.length < 5) {
        log("Invalid server Address: " + addr);
        return false;
    }
    SERVER_ADDRESS = addr.slice(4);
    connectAddr = SERVER_ADDRESS + ":" + SERVER_PORT + SLASH + SZCORE;
    log("connectAddr:  "+connectAddr);
}
function ping(serverTime) {
    var msg = connectAddr + PING_TXT + serverTime + COMMAND_SUFFIX;
    //log(msg);
    return msg;
   // post(connectAddr, PING, serverTime);
}
function setTitle(title) {
    var out = TITLE + " set txt '" + title + "';";
    return out;
}
function setPart(part) {
    var out = PART + " set txt '" + part + "';";
    return out;
}
function sendHello() { 
    log("Connecting to " + connectAddr);
    post(connectAddr, HELLO, LOCAL_PORT, LOCAL_OUT_PORT);
}
function setInstrument(idx) {
    hideSelectPartLayer();
    if(idx < 0 || idx >= instruments.length){
        log("Invalid index: " + idx);
        return;
    }
    var inst = instruments[idx];
    log("Sending instrument to " + inst);
    post(connectAddr, SET_INSTRUMENT, inst);
}
function logInstrument(idx){
    if(idx < 0 || idx >= instruments.length){
        log("Invalid index: " + idx);
        return;
    }
    var inst = instruments[idx];
    log("Selected instrument: " + inst + " idx: " + idx);
}
function addInstrument(name){
    var idx = instruments.indexOf(name);
    if(idx < 0){
        instruments.push(name);   
    } else {
        log("Already Have instrument: " + name);
        return instControls;
    }

    idx = instruments.indexOf(name);
     
    instY += deltaInstY;
    
    var controlName = name.replace(SPACE, UNDERSCORE);

    var instTxt = "/ITL/scene/selectPartLayer/inst" + controlName;
    instControls[instControlIdx++] = instTxt + " set txt '" + name +  "';";
    instControls[instControlIdx++] = instTxt + " x " + instX + ";";
    instControls[instControlIdx++] = instTxt + " y " + instY + ";";
    instControls[instControlIdx++] = instTxt + " z " + instZ + ";";
    instControls[instControlIdx++] = instTxt + " scale " + instTxtScale + ";";
    instControls[instControlIdx++] = instTxt + " watch mouseEnter ( " + instTxt + " color " + activeColor + " );";
    instControls[instControlIdx++] = instTxt + " watch mouseLeave ( " + instTxt + " color " + inactiveColor + " );";
    instControls[instControlIdx++] = instTxt + " watch mouseUp ( " + JS_RUN + " 'setInstrument("+ idx + ")' );";
    
    return instControls;
}
function setInstruments(csvInstruments){ 
    if(!csvInstruments){
        return;
    }
    
    instControls = [];
    instruments = [];
    instY = DEFAULT_INST_Y;
    
    var instNameArr = convertCsvToArr(csvInstruments);
    
    for (var i = 0; i < instNameArr.length; i++) {
       addInstrument(instNameArr[i]);
    }

    showSelectPartLayer();

    return instControls;
}
function convertCsvToArr(csvStr) {
    if (!csvStr) {
        return [];
    }

    return csvStr.split(COMMA);
}
function resetScore(){
    resetContent();
    resetTitle();
    resetPart();
}
function resetInstrument(){
    log("reset Instrument ...");
    return resetContent();
}
function resetStaves(){
    resetStave(STAVE1);
    resetStave(STAVE2);
}
function setTempo(tempo){
    log("setting tempo: " + tempo);
    currentTempo = tempo;
    return setStaveTempo(activeStave, tempo);
}
function stop(){
    out = [];
    var tp = setTempo(0);
    if(tp){
       out = out.concat(tp);
    }
    var staveId = getStaveId(activeStave);
    var dt = setDate(staveId, "0");
    if(dt){
       out = out.concat(dt);
    }
    var bOff = allBeatersOff();
    if(bOff){
        out = out.concat(bOff);
    }
    var bOn = beatersOn(1, 4);
    if(bOn){
        out = out.concat(bOn);
    }
//    logArray(out);
    return out;
}
function resetContent(){
    log("Resetting content ....");
    for (var i = 0; i < sceneComponents.length; i++) {
        showComponent(sceneComponents[i], 0);
    }
}
function showControls(showValue){
    log("Showing control components: " + showValue);
    for (var i = 0; i < controlComponents.length; i++) {
        showComponent(controlComponents[i], showValue);
    }
}
function showTop(colourName, startAlpha, endAlpha){
    var colour = getColourByName(colourName);
    var component = CONTENT_TOP;
    postColourByName(component, colourName, startAlpha);
    showComponent(component, 1);
    log("Received showTop  component: " + component + " startAlpha: " + startAlpha + " endAlpha: " + endAlpha);
    return createGradualAlpha(component, startAlpha, endAlpha);    
}
function showMiddle(colourName, startAlpha, endAlpha){
    var colour = getColourByName(colourName);
    var component = CONTENT_MIDDLE;
    postColourByName(component, colourName, startAlpha);
    showComponent(component, 1);
    log("Received showMiddle  component: " + component + " startAlpha: " + startAlpha + " endAlpha: " + endAlpha);
    return createGradualAlpha(component, startAlpha, endAlpha);    
}
function showBottom(colourName, startAlpha, endAlpha){
    var out = [];
    var colour = getColourByName(colourName);
    var component = CONTENT_BOTTOM;
    var showCmd = component + SPACE + SHOW + SPACE + 1 + SEMICOLON;
    out.push(showCmd);
    var cmd = component + SPACE + COLOR + SPACE + colour + SPACE + startAlpha + SEMICOLON;
    out.push(cmd);
    log("Received showBottom  component: " + component + " startAlpha: " + startAlpha + " endAlpha: " + endAlpha);
    var ga = createGradualAlpha(component, startAlpha, endAlpha);
    if(ga){
       out = out.concat(ga);
    }
    return out;
}
function postGradualAlpha(component, startAlpha, endAlpha){
    if(!component) {
        return;
    }
    log("postGradualAlpha component: " + component + " startAlpha: " + startAlpha + " endAlpha: " + endAlpha);
    if(startAlpha < 0 || startAlpha > 255){
        startAlpha = 0;
    }
    if(endAlpha < 0 || endAlpha > 255) {
        endAlpha = 255;        
    }
  
    if(startAlpha <= endAlpha) {
        for(var i = startAlpha; i <= endAlpha; i++) {
            //log("postGradualAlpha component: " + component + " i: " + i);
            post(component, ALPHA, i);
        }
    } else {
        for(var i = startAlpha; i >= endAlpha; i--) {
            //log("postGradualAlpha component: " + component + " i: " + i);
            post(component, ALPHA, i);
        }
    }
}
function createGradualAlpha(component, startAlpha, endAlpha){
    if(!component) {
        return;
    }
    var out = [];
    log("createGradualAlpha component: " + component + " startAlpha: " + startAlpha + " endAlpha: " + endAlpha);
    if(startAlpha < 0 || startAlpha > 255){
        startAlpha = 0;
    }
    if(endAlpha < 0 || endAlpha > 255) {
        endAlpha = 255;        
    }
  
    if(startAlpha <= endAlpha) {
        for(var i = startAlpha; i <= endAlpha; i++) {
            var cmd = component + SPACE + ALPHA + SPACE + i + SEMICOLON;
            //log("createGradualAlpha cmd: " + cmd);
            out.push(cmd);
        }
    } else {
        for(var i = startAlpha; i >= endAlpha; i--) {
            var cmd = component + SPACE + ALPHA + SPACE + i + SEMICOLON;
            //log("createGradualAlpha cmd: " + cmd);
            out.push(cmd);
        }
    }
    return out;
}
function showColour(component, colourName, alpha){
    var colour = getColourByName(colourName);
    setAlpha(component,alpha);
    postColourByName(component, colourName, alpha);
    showComponent(component, 1);
}
function setAlpha(component, alphaValue) {
   post(component, ALPHA, alphaValue);
}
function setFile(component, filePath) {
   post(component, SET, FILE, filePath);
   showComponent(component, 1);
}
function setFrameless(isFrameless) {
   post(SCENE, FRAMELESS, isFrameless); 
}
function setFullScreen(isFullScreen) {
   post(SCENE, FULLSCREEN, isFullScreen); 
}
function switchControls() {
    if(controlsOn) {
        controlsOn = false;
        showControls(0);
        setFrameless(1);
        setFullScreen(1);
    } else {
        controlsOn = true;
        showControls(1);
        setFrameless(0);
        setFullScreen(0);
    }
}
//  ########################## END JS ##############################


?>

/ITL/scene/* del;
/ITL/scene color 220 220 220 255;

/ITL/scene/title set txt "Szcore";
/ITL/scene/title x 0.0;
/ITL/scene/title y -0.9;
/ITL/scene/title z 3.0;
/ITL/scene/title scale 3.0;

/ITL/scene/part set txt "Part";
/ITL/scene/part x 0.0;
/ITL/scene/part y -0.8;
/ITL/scene/part scale 1.5;

/ITL/scene/contentPane set 'rect' 2.0 1.5;
/ITL/scene/contentPane x 0.0;
/ITL/scene/contentPane y 0.0;
/ITL/scene/contentPane z 1.0;
/ITL/scene/contentPane scale 1.0;
/ITL/scene/contentPane color 215 215 215 255;

/ITL/scene/contentPaneFull set 'rect' 2.0 1.5;
/ITL/scene/contentPaneFull x 0.0;
/ITL/scene/contentPaneFull y 0.0;
/ITL/scene/contentPaneFull z 2.0;
/ITL/scene/contentPaneFull scale 1.0;
/ITL/scene/contentPaneFull color 255 255 255 255;

/ITL/scene/contentPaneTop set 'rect' 2.0 0.5;
/ITL/scene/contentPaneTop x 0.0;
/ITL/scene/contentPaneTop y -0.5;
/ITL/scene/contentPaneTop z 1.0;
/ITL/scene/contentPaneTop scale 1.0;
/ITL/scene/contentPaneTop color 0 0 0 255;

/ITL/scene/contentPaneMiddle set 'rect' 2.0 0.5;
/ITL/scene/contentPaneMiddle x 0.0;
/ITL/scene/contentPaneMiddle y 0.0;
/ITL/scene/contentPaneMiddle z 1.0;
/ITL/scene/contentPaneMiddle scale 1.0;
/ITL/scene/contentPaneMiddle color 255 255 255 255;

/ITL/scene/contentPaneBottom set 'rect' 2.0 0.5;
/ITL/scene/contentPaneBottom x 0.0;
/ITL/scene/contentPaneBottom y 0.5;
/ITL/scene/contentPaneBottom z 1.0;
/ITL/scene/contentPaneBottom scale 1.0;
/ITL/scene/contentPaneBottom color 255 0 0 255;

/ITL/scene/yuStar set file 'rsrc/YuStar.svg' ;
/ITL/scene/yuStar x 0.0;
/ITL/scene/yuStar y 0.0;
/ITL/scene/yuStar scale 2.0;
/ITL/scene/yuStar z 3.0;
/ITL/scene/yuStar show 1;

/ITL/scene/macedoniaStar set file 'rsrc/YuStar.svg' ;
/ITL/scene/macedoniaStar x -0.5;
/ITL/scene/macedoniaStar y -0.5;
/ITL/scene/macedoniaStar scale 0.8;
/ITL/scene/macedoniaStar z 2.0;
/ITL/scene/macedoniaStar show 1;

/ITL/scene/bihYuCorner set file 'rsrc/BihTopLeft.svg' ;
/ITL/scene/bihYuCorner x -0.72;
/ITL/scene/bihYuCorner y -0.61;
/ITL/scene/bihYuCorner scale 1.5;
/ITL/scene/bihYuCorner z 2.0;
/ITL/scene/bihYuCorner show 1;

/ITL/scene/flagDecorator set file 'rsrc/UkFlagNoWhite.svg' ;
/ITL/scene/flagDecorator x 0.0;
/ITL/scene/flagDecorator y 0.0;
/ITL/scene/flagDecorator scale 1.9;
/ITL/scene/flagDecorator z 3.0;
/ITL/scene/flagDecorator show 1;

/ITL/scene/ukFlag set file 'rsrc/UkFlag.svg' ;
/ITL/scene/ukFlag x 0.0;
/ITL/scene/ukFlag y 0.0;
/ITL/scene/ukFlag scale 1.66;
/ITL/scene/ukFlag z 3.0;
/ITL/scene/ukFlag show 1;

/ITL/scene/connect set txt "Connect";
/ITL/scene/connect x 1.0;
/ITL/scene/connect y -0.9;
/ITL/scene/connect scale 1.5;
/ITL/scene/connect color 0 0 0;
/ITL/scene/connect z 2.0;
/ITL/scene/connect watch mouseEnter ( /ITL/scene/connect color 255 0 0 );
/ITL/scene/connect watch mouseDown  ( /ITL/scene/javascript run "sendHello()" );

/ITL/scene/connectBox set rect 0.3 0.12;
/ITL/scene/connectBox x 1.0;
/ITL/scene/connectBox y -0.91;
/ITL/scene/connectBox color 200 255 200;
/ITL/scene/connectBox watch mouseEnter ( /ITL/scene/connect color 255 0 0 );
/ITL/scene/connectBox watch mouseLeave ( /ITL/scene/connect color 0 0 0 );
/ITL/scene/connectBox watch mouseDown  ( /ITL/scene/javascript run "sendHello()" );

/ITL/scene/server set txt "Server: ";
/ITL/scene/server x 0.77;
/ITL/scene/server y -0.8;
/ITL/scene/server scale 1.2;
/ITL/scene/server color 0 0 0;

/ITL/scene/serverAddr set txt "IP address";
/ITL/scene/serverAddr x 1.0;
/ITL/scene/serverAddr y -0.8;
/ITL/scene/serverAddr z 2.0;
/ITL/scene/serverAddr scale 1.2;
/ITL/scene/serverAddr color 0 0 0;
/ITL/scene/serverAddr watch newData (/ITL/scene/javascript run "onServerAddrChange('$(/ITL/scene/serverAddr get)')");

/ITL/scene/serverAddrBox set rect 0.3 0.06;
/ITL/scene/serverAddrBox x 1.0;
/ITL/scene/serverAddrBox y -0.81;
/ITL/scene/serverAddrBox color 230 230 230;
/ITL/scene/serverAddrBox watch mouseEnter ( /ITL/scene/serverAddr color 255 0 0 );
/ITL/scene/serverAddrBox watch mouseLeave ( /ITL/scene/serverAddr color 0 0 0 );
/ITL/scene/serverAddrBox watch doubleClick ( /ITL/scene/serverAddr edit);

/ITL/scene/selectPartLayer set layer;
/ITL/scene/selectPartLayer z 5.0;
/ITL/scene/selectPartLayer show 0;

/ITL/scene/selectPartLayer/selectTxt set txt "Select Part: ";
/ITL/scene/selectPartLayer/selectTxt x 0.0;
/ITL/scene/selectPartLayer/selectTxt y -0.6;
/ITL/scene/selectPartLayer/selectTxt z 7.0;
/ITL/scene/selectPartLayer/selectTxt scale 2.2;

/ITL/scene/selectPartLayer/selectTxtBox set 'rect' 1.0 2.0;
/ITL/scene/selectPartLayer/selectTxtBox color 0 230 0 230;
/ITL/scene/selectPartLayer/selectTxtBox x 0.0;
/ITL/scene/selectPartLayer/selectTxtBox y -0.0;
/ITL/scene/selectPartLayer/selectTxtBox z 6.0;

/ITL/scene/controlSwitch set "ellipse" 0.03 0.03;
/ITL/scene/controlSwitch x -1.0;
/ITL/scene/controlSwitch y 0.95;
/ITL/scene/controlSwitch z 8.0;
/ITL/scene/controlSwitch color 180 180 180 255;
/ITL/scene/controlSwitch watch mouseDown  ( /ITL/scene/javascript run "switchControls()" );

/ITL/scene/logger set txt "logger";
/ITL/scene/logger x 0.0;
/ITL/scene/logger y 0.95;
/ITL/scene/logger scale 0.8;

<? javascript
//addInstrument("Cello");
//setTempo(120);
//showTop('blue', 10, 20);
//postGradualAlpha(CONTENT_TOP, 30, 30);
//createGradualAlpha(CONTENT_TOP, 255, 0);
//post(SCORE_SERVER_ADDR,"set","txt",SERVER_ADDRESS);
init();
resetContent();
?>
